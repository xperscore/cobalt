// ------------------------------------------------------------
//
// Cobalt CSS Base.
//
// ------------------------------------------------------------


// Root Elements
// ------------------------------------------------------------
//

html {
	min-width: 320px;
}

body {
    background:  @body-bg;
    .default-font();
}

// ------------------------------------------------------------
// Links
// ------------------------------------------------------------
//
a { 
    color: @dark-grey; text-decoration: none; 
    border: 0;
    outline: none;
    .fade-links(0.1s);
}
a:hover    { color: @cobalt-blue; }
*:focus    { outline: none; }
*:invalid  { outline: none; box-shadow: none; }


// ------------------------------------------------------------
// Images
// ------------------------------------------------------------
//
.img-rounded(@radius: 4px) {
	.border-radius(@radius);
}

.img-circle() {
	.border-radius(50%);
}
// @size small || medium || large
.img-polaroid(@size) {

	.padding-size() when (@size = small) {
		padding: 4px;
	}
	.padding-size() when (@size = medium) {
		padding: 7px;
	}
	.padding-size() when (@size = large) {
		padding: 15px;
	}
	
	.padding-size;
	background: @white;
	.border(@vlight-grey);
	
	
} // img-polaroid

// ------------------------------------------------------------
// Buttons
// ------------------------------------------------------------
//
// Params: 
// @size: very-small || [small] || medium || large || huge
// @rounded: true || [false]
// @color: [notset] || lightgray || red || green || blue || yellow || dark || Custom HEX
// 
.btn(@size: small, @rounded: false, @color: notset) {
    background: transparent;
    display: inline-block;
    cursor: pointer;

    .border;
    .btn-sizing(@size, @rounded);
    .color;

    .color() when (@color = notset) {
        .customize('btn-color');
    }
    .color() when not (@color = notset) {
        .btn-color(@color) !important;
    }
}

.btn-sizing(@size:        small,
            @rounded:     false,
            @nudge:           0,
            @min-icon-space: 36,
            @round-empty:  true) {
       box-sizing: border-box;
  -moz-box-sizing: border-box;
  vertical-align: middle;

  .rounded(@rounded);

  @basefs: @base-font-size;
  @baselh: 18px;

  // size        vpad (px)   hpad (px)
  // ---------------------------------
  .sizes(
     very-small   5           8
     small        8          12
     medium      12          22
     large       15          40
     huge        25          80
  );

  .sizes(@xs, @n: 1) {
    .next(extract(@xs, @n), extract(@xs, (@n+1)), extract(@xs, (@n+2)));
    .next(@sz,              @vpad,                @hpad) when (iskeyword(@sz)) {
      .apply;

      .apply() when (@sz = @size) {
        @lh: (@baselh + 2px * @vpad + @nudge);

        line-height: @lh;
        height:      (@lh + 2);
        padding:     0 (@hpad * 1px);

        &[icon] {
          padding-left: 0;
          &:before {
            display: inline-block;
            text-align: center;
          }
        }

        .lpad;

        // add a base left padding of 1/8 LH when rounded to counteract the curvature
        .lpad() when (@rounded = true), (@rounded = left) {
          .adjust-lpad(@lh/8);
        }
        .lpad() when not (@rounded = true) and not (@rounded = left) {
          .adjust-lpad(0);
        }

        // ensure a minimum amount of space for the icon
        .adjust-lpad(@baselp) when (@hpad < @min-icon-space) {
          .apply-lpad(@baselp, @min-icon-space*1px);
        }
        .adjust-lpad(@baselp) when (@hpad >= @min-icon-space) {
          .apply-lpad(@baselp, @hpad*1px);
        }

        .apply-lpad(@baseplp, @icon-hp) {
          padding-left: (@baselp + @hpad*1px);
          &[icon]:before {
            margin-left: (@baselp + @icon-hp/4);
            width:       (3/4*@icon-hp);
          }
        }

        // empty, i.e., icon-only button
        &:empty:not(input) {
          width:  (@lh + 2);
          padding: 0;
          text-align: center;

          .rounding;
          .rounding() when (@round-empty) {
            .rounded(true);
          }

          &:before {
            margin: 0; padding: 0;
            width: auto;
            display: inline;
          }
        }

      }
      .sizes(@xs, (@n+3));
    }
  }
}

// ----------------------------------------
// Button styles
// ----------------------------------------
//
// Params: @lightcolor @darkcolor @highlight @border @font: light || [dark]
//
.btn-styles(
    @lightcolor: #f0f3f4, @darkcolor: #dce1e3, @highlight: @white, 
    @border: #c0c6c9, @font: dark) {

    .gradient(@lightcolor, @darkcolor);
    .inner-highlight(@highlight);
    border-color: @border;
    .fade-links(.25s);
    
    .color() when (@font = dark) {
        color: darken(@darkcolor, 30%);
    }
    .color() when (@font = light) {
        color: @white;
    }
    .color();
    
    &:hover {
        .gradient(@lightcolor, darken(@darkcolor, 5%));
        border-color: darken(@border, 10%);
        
        .color() when (@font = dark) {
            color: darken(@darkcolor, 40%);
        }
        .color() when (@font = light) {
            color: @white;
        }
        .color();
    
    } // &:hover
    
    &:active {
        .gradient(darken(@lightcolor, 3%), darken(@darkcolor, 8%));
        .active-shadow(@darkcolor);
    
    } // &:active
    
} // btn-styles()
    
    
// ----------------------------------------
// Button color
// ----------------------------------------
// 
// This is a simpler version of .btn-styles
//
// Params:
// @color: [default] || red || green || blue || yellow || dark || Custom HEX
// 
.btn-color(@color: default) {
    .style() when (iscolor(@color)) {
        @lightcolor: lighten(@color, 5%);
        @darkcolor:  darken(@color, 12%);
        @highlight:  lighten(@color, 20%);
        @border:     darken(@color, 25%);
        
        .btn-styles(@lightcolor, @darkcolor, @highlight, @border, light);
    }

    .style() when (@color = default) { .btn-styles(); }
    .style() when (@color = red)     { .btn-styles(#e75646, #c9392a, #f88d81, #940f01, light); }
    .style() when (@color = green)   { .btn-styles(#2fc983, #259c65, #80dcb2, #2c9163, light); }
    .style() when (@color = blue)    { .btn-styles(#6bb3e9, #267c9c, #96d2f1, #157294, light); }
    .style() when (@color = yellow)  { .btn-styles(#fbd256, #e8ab18, #ffebb4, #cd8c00, light); }
    .style() when (@color = dark)    { .btn-styles(#586570, #40484d, #74899a, #000, light); }

    .style;

} // .btn-color()

// Buttons
// ----------------------------------------


// ----------------------------------------
// Forms
// ----------------------------------------
//

// Inputs
// ----------------------------------------
//
.input-container(@size: large, @rounded: false) {
    display: inline-block;

    .border(@vlight-grey);
    
    .btn-sizing(@size, @rounded, @min-icon-space: 32);
    padding-right: 0;

    &[icon]:before { color: @light-grey; }
    
    > input {
        color: @dark-grey;
        border: 0; background: transparent;
        padding: 0;

        .sizes(
          very-small 150
          small      200
          medium     250
          large      300
          huge       450
        );

        .sizes(@xs, @n: 1) {
          .next(extract(@xs, @n), extract(@xs, (@n+1)));
          .next(@sz, @w) when (iskeyword(@sz)) {
            .apply;
            .apply() when (@sz = @size) {
              width: (@w * 1px);
            }
            .sizes(@xs, (@n+2));
          }
        }

    } // input
    
    > button {
        float: right;
        margin: -1px;
        margin-left: 0;

        border-color: @vlight-grey;

        .sizing;
        .sizing() when (@rounded = true), (@rounded = right) {
          .do-sizing(right);
        }
        .sizing() when not (@rounded = true) {
          .do-sizing(false);
        }
        
        .do-sizing(@rnd) {
          .btn-sizing(@size, @rnd, @round-empty: false);
        }

        .border-radius-left(0);

    } // button

} // input-container();
