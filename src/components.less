// ------------------------------------------------------------
//
// Cobalt CSS Base.
//
// ------------------------------------------------------------


// ------------------------------------------------------------
// Break point tester
//
// Include: <div bp-tester></div>
//
[bp-tester] {
	&:after {
		position: fixed;
		bottom: 0px;
		left: 0;
		height: 20px;
		width: 100%;
		content: "";
		padding: 10px;
		text-align: center;
    }
}

[bp-indicator] {
    display: inline-block;

    &:after {
        background: gray;
        content: 'NOBP';
    }
}

[bp-tester], [bp-indicator] {
    &:after {	
        .indications(
            @bp1 '@BP1' crimson
            @bp2 '@BP2' orange
            @bp3 '@BP3' gold
            @bp4 '@BP4' limegreen
            @bp5 '@BP5' cornflowerblue
            @bp6 '@BP6' orchid
            @bp7 '@BP7' blueviolet
        );

        .indications(@list, @num: 1) {
            .next((extract(@list, @num)),
                    (extract(@list, @num + 1)),
                    (extract(@list, @num + 2)));
            .next(@v, @lbl, @color) when (isnumber(@v)) {
                @media screen and (max-width: @v) {
                    background: @color;
                    content: '@{v}, @{lbl}';
                }
                .indications(@list, (@num + 3));
            }
        }
	}
}
//
// BP TESTER


// Root Elements
// ------------------------------------------------------------
//

html {
	min-width: 320px;
}

body {
    background:  @body-bg;
    .default-font();
}

// ------------------------------------------------------------
// Links
// ------------------------------------------------------------
//
a { 
    color: @dark-grey; text-decoration: none; 
    border: 0;
    outline: none;
    .fade-links(0.1s);
}
a:hover    { color: @cobalt-blue; }
*:focus    { outline: none; }
*:invalid  { outline: none; box-shadow: none; }


// ------------------------------------------------------------
// Images
// ------------------------------------------------------------
//
.img-rounded(@radius: 4px) {
	.border-radius(@radius);
}

.img-circle() {
	.border-radius(50%);
}
// @size small || medium || large
.img-polaroid(@size) {

	.padding-size() when (@size = small) {
		padding: 4px;
	}
	.padding-size() when (@size = medium) {
		padding: 7px;
	}
	.padding-size() when (@size = large) {
		padding: 15px;
	}
	
	.padding-size;
	background: @white;
	.border(@vlight-grey);
	
	
} // img-polaroid

// ------------------------------------------------------------
// Vertical & Horizontal Tabs
// ------------------------------------------------------------
//
[tabs], [vtabs] {
    margin-bottom: 20px;
    .contain-floats;

    // Selected tab indicator
    > input { display: none; }
    
    // Tab buttons
    > nav label {
        cursor: pointer;
        .border;
        padding: 10px 20px;
        .customize('tab-btn');
        
        &:hover {
            .customize('tab-btn:hover');
        }
    }
    
    // Tab content containers
    > [content] > div {
        display: none;
    }
    
    // Selected tab button
    .sel-tab-btn(@idx) { > input:checked:nth-child(@{idx}) ~ nav > label:nth-child(@{idx}) {
        .customize('tab-btn:active');
    } }

    // Selected tab content container
    .sel-tab-cont(@idx) { > input:checked:nth-child(@{idx}) ~ [content] > div:nth-child(@{idx}) {
        display: block;
    } }

    // Enumerate tab selectablility
    .selectable(@idx) when (@idx > 0) {
        .sel-tab-btn(@idx);
        .sel-tab-cont(@idx);
        .selectable((@idx - 1));
    }

    // Allow up to 10 tabs
    .selectable(10);
    
} // [tabs], [vtabs]

.wireframe('tab-btn:active') {
    background: lightgray;
}

// Horizontal tabs
[tabs] {
    > nav label {
        float: left;
        .border-radius-top();
    }
    
    > nav label + label {
         margin-left: 6px;
     }

    > [content] {
        
        > div {
            float: left;
            width: 100%;
            margin-top: -1px;
            .border(#b3b3b3);
        }
    }
}

// Vertical tabs
[vtabs] {
    .border(#b3b3b3);
    .border-radius-left;
    border-left: none;
    
    > nav {
        float: left;
        margin-top: -1px;
        margin-bottom: -1px;
        
        > label {
            display: block;

            + label {
                border-top: none !important;
            }

            &:first-child {
                .border-radius-top-left;
            }

            &:last-child {
                .border-radius-bottom-left;
            }
        }
    
    } // > nav

    > [content] {
        overflow: hidden;
    }
}

// ------------------------------------------------------------
// Site Nav
// ------------------------------------------------------------
//

[site-nav] {
    .contain-floats;

    // nav links.
    > * {
        padding: 3px 20px;
        text-decoration: none;
        float: left;
        margin-right: 10px;
        &:last-child {
            margin-right: 0;
        }
    }

    @media screen and (max-width: @bp6) {
        display: block;
        position: absolute;
        top: 0;
        left: 0;
        bottom: 0;
        overflow: hidden;
        width: 0;
        -webkit-transition: 0.3s width;

        // nav links.
        > * {
            float: none;
            display: block;
        }
    }
}

#site-nav-toggle {
    display: none;
}

// site nav button in responsive mode
label[for=site-nav-toggle] {
    display: none;
    cursor: pointer;
    .border(lightgray);
    .border-radius;
    padding: 3px 5px 1px;

    &:before {
        .icon-menu;
    }
}

@media screen and (max-width: @bp6) {
    label[for=site-nav-toggle] {
        display: inline-block;
    }
    
    // site-nav expanded
    #site-nav-toggle {
        ~ * [fixed-width], ~ [fixed-width] {
            -webkit-transition: 0.3s margin-left;
        }

        &:checked {
            ~ * [site-nav] {
                display: block;
                width: 125px;
            }
            ~ * > [fixed-width], ~ [fixed-width] {
                margin-left: 140px;
            }
        }
    }
}
// site-nav()

// ------------------------------------------------------------
// Buttons
// ------------------------------------------------------------
//
// Params: 
// @size: very-small || [small] || medium || large || huge
// @rounded: true || [false]
// @color: [notset] || lightgray || red || green || blue || yellow || dark || Custom HEX
// 
.btn(@size: small, @rounded: false, @color: notset) {
    background: transparent;
    display: inline-block;
    cursor: pointer;

    .border;
    .btn-sizing(@size, @rounded);
    .color;

    .color() when (@color = notset) {
        .customize('btn-color');
    }
    .color() when not (@color = notset) {
        .btn-color(@color) !important;
    }
}

.btn-sizing(@size:        small,
            @rounded:     false,
            @nudge:           0,
            @min-icon-space: 36,
            @round-empty:  true) {
       box-sizing: border-box;
  -moz-box-sizing: border-box;
  vertical-align: middle;

  .rounded(@rounded);

  @basefs: @base-font-size;
  @baselh: 18px;

  // size        vpad (px)   hpad (px)
  // ---------------------------------
  .sizes(
     very-small   5           8
     small        8          12
     medium      12          22
     large       15          40
     huge        25          80
  );

  .sizes(@xs, @n: 1) {
    .next(extract(@xs, @n), extract(@xs, (@n+1)), extract(@xs, (@n+2)));
    .next(@sz,              @vpad,                @hpad) when (iskeyword(@sz)) {
      .apply;

      .apply() when (@sz = @size) {
        @lh: (@baselh + 2px * @vpad + @nudge);

        line-height: @lh;
        height:      (@lh + 2);
        padding:     0 (@hpad * 1px);

        &[icon] {
          padding-left: 0;
          &:before {
            display: inline-block;
            text-align: center;
          }
        }

        .lpad;

        // add a base left padding of 1/8 LH when rounded to counteract the curvature
        .lpad() when (@rounded = true), (@rounded = left) {
          .adjust-lpad(@lh/8);
        }
        .lpad() when not (@rounded = true) and not (@rounded = left) {
          .adjust-lpad(0);
        }

        // ensure a minimum amount of space for the icon
        .adjust-lpad(@baselp) when (@hpad < @min-icon-space) {
          .apply-lpad(@baselp, @min-icon-space*1px);
        }
        .adjust-lpad(@baselp) when (@hpad >= @min-icon-space) {
          .apply-lpad(@baselp, @hpad*1px);
        }

        .apply-lpad(@baseplp, @icon-hp) {
          padding-left: (@baselp + @hpad*1px);
          &[icon]:before {
            margin-left: (@baselp + @icon-hp/4);
            width:       (3/4*@icon-hp);
          }
        }

        // empty, i.e., icon-only button
        &:empty:not(input) {
          width:  (@lh + 2);
          padding: 0;
          text-align: center;

          .rounding;
          .rounding() when (@round-empty) {
            .rounded(true);
          }

          &:before {
            margin: 0; padding: 0;
            width: auto;
            display: inline;
          }
        }

      }
      .sizes(@xs, (@n+3));
    }
  }
}

// ----------------------------------------
// Button Panels 
// ----------------------------------------
//
[panel] {
    position: fixed;
    margin: 0; // <menu> elements get a mean margin
    bottom: -50px;
    left: 5px;
    right: 5px;
    padding: 10px;
    background: lightgray;

    &[panel=expanded] {
        bottom: 0px; // REVIEW: height
        -webkit-transition: 0.4s bottom;
    }


    .border-radius-top(5px);

    > * {
        padding: 3px;
        .border;
        .types(command widget preview);

        .types(@xs, @n: 1) {
            .next(extract(@xs, @n));
            .next(@v) when (iskeyword(@v)) {
                &[@{v}]:before {
                    content: attr(@v);
                }
                .types(@xs, (@n + 1));
            }
        }
    }
}

// ----------------------------------------
// Button styles
// ----------------------------------------
//
// Params: @lightcolor @darkcolor @highlight @border @font: light || [dark]
//
.btn-styles(
    @lightcolor: #f0f3f4, @darkcolor: #dce1e3, @highlight: @white, 
    @border: #c0c6c9, @font: dark) {

    .gradient(@lightcolor, @darkcolor);
    .inner-highlight(@highlight);
    border-color: @border;
    .fade-links(.25s);
    
    .color() when (@font = dark) {
        color: darken(@darkcolor, 30%);
    }
    .color() when (@font = light) {
        color: @white;
    }
    .color();
    
    &:hover {
        .gradient(@lightcolor, darken(@darkcolor, 5%));
        border-color: darken(@border, 10%);
        
        .color() when (@font = dark) {
            color: darken(@darkcolor, 40%);
        }
        .color() when (@font = light) {
            color: @white;
        }
        .color();
    
    } // &:hover
    
    &:active {
        .gradient(darken(@lightcolor, 3%), darken(@darkcolor, 8%));
        .active-shadow(@darkcolor);
    
    } // &:active
    
} // btn-styles()
    
    
// ----------------------------------------
// Button color
// ----------------------------------------
// 
// This is a simpler version of .btn-styles
//
// Params:
// @color: [default] || red || green || blue || yellow || dark || Custom HEX
// 
.btn-color(@color: default) {
    .style() when (iscolor(@color)) {
        @lightcolor: lighten(@color, 5%);
        @darkcolor:  darken(@color, 12%);
        @highlight:  lighten(@color, 20%);
        @border:     darken(@color, 25%);
        
        .btn-styles(@lightcolor, @darkcolor, @highlight, @border, light);
    }

    .style() when (@color = default) { .btn-styles(); }
    .style() when (@color = red)     { .btn-styles(#e75646, #c9392a, #f88d81, #940f01, light); }
    .style() when (@color = green)   { .btn-styles(#2fc983, #259c65, #80dcb2, #2c9163, light); }
    .style() when (@color = blue)    { .btn-styles(#6bb3e9, #267c9c, #96d2f1, #157294, light); }
    .style() when (@color = yellow)  { .btn-styles(#fbd256, #e8ab18, #ffebb4, #cd8c00, light); }
    .style() when (@color = dark)    { .btn-styles(#586570, #40484d, #74899a, #000, light); }

    .style;

} // .btn-color()

// Buttons
// ----------------------------------------


// ----------------------------------------
// Forms
// ----------------------------------------
//

// Inputs
// ----------------------------------------
//
.input-container(@size: large, @rounded: false) {
    display: inline-block;

    .border(@vlight-grey);
    
    .btn-sizing(@size, @rounded, @min-icon-space: 32);
    padding-right: 0;

    &[icon]:before { color: @light-grey; }
    
    > input {
        color: @dark-grey;
        border: 0; background: transparent;
        padding: 0;

        .sizes(
          very-small 150
          small      200
          medium     250
          large      300
          huge       450
        );

        .sizes(@xs, @n: 1) {
          .next(extract(@xs, @n), extract(@xs, (@n+1)));
          .next(@sz, @w) when (iskeyword(@sz)) {
            .apply;
            .apply() when (@sz = @size) {
              width: (@w * 1px);
            }
            .sizes(@xs, (@n+2));
          }
        }

    } // input
    
    > button {
        float: right;
        margin: -1px;
        margin-left: 0;

        .sizing;
        .sizing() when (@rounded = true), (@rounded = right) {
          .do-sizing(right);
        }
        .sizing() when not (@rounded = true) {
          .do-sizing(false);
        }
        
        .do-sizing(@rnd) {
          .btn-sizing(@size, @rnd, @round-empty: false);
        }

        .border-radius-left(0);

    } // button

} // input-container();
